[{"/Users/harmansahota/Desktop/Multiple-days-Non-Profits-and-Health-Wellness-Group-B/frontend/src/pages/network.js":"1","/Users/harmansahota/Desktop/Multiple-days-Non-Profits-and-Health-Wellness-Group-B/frontend/src/pages/tracker.js":"2"},{"size":14244,"mtime":1678335525572,"results":"3","hashOfConfig":"4"},{"size":31442,"mtime":1678323645011,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ni9587",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"/Users/harmansahota/Desktop/Multiple-days-Non-Profits-and-Health-Wellness-Group-B/frontend/src/pages/network.js",["14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"],[],"/Users/harmansahota/Desktop/Multiple-days-Non-Profits-and-Health-Wellness-Group-B/frontend/src/pages/tracker.js",["30","31","32","33","34","35","36","37"],[],"import React, { useState, useRef, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport trackerCSS from \"./tracker.module.css\";\nimport fourcss from \"./fourcss.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\n\nimport * as d3Fetch from \"d3-fetch\";\nimport * as d3Scale from \"d3-scale\";\nimport * as d3Shape from \"d3-shape\";\nimport * as d3Selection from \"d3-selection\";\nimport * as d3Axis from \"d3-axis\";\nimport * as d3ScaleChromatic from \"d3-scale-chromatic\";\n\nfunction Tracker() {\n  const [getData, setData] = useState([]);\n  const fetchData = async () => {\n    const response = await fetch(\"http://127.0.0.1:8000/api/trackerPull/\");\n    const data = await response.json();\n    return setData(data);\n  }\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n\n\n  const [trackers, setTrackers] = useState({\n    Category: \"Fresh Produce\",\n    Description: \"\",\n    Quantity: \"\",\n    Qunits: \"lb\",\n    amountToClients: \"\",\n    amountToAFeed: \"\",\n    amountToCompost: \"\",\n    amountToPartnerNetwork: \"\",\n   \n  });\n\n  const quantity = useRef();\n  const clients = useRef();\n  const animalFeed = useRef();\n  const compost = useRef();\n  const partnerNetwork = useRef();\n  const landFill = useRef();\n\n  const percentClients = useRef();\n  const percentAnimalFeed = useRef();\n  const percentCompost = useRef();\n  const percentPartnerNetwork = useRef();\n  const percentLandFill = useRef();\n\n  // setInterval(calculateLandFillPercent(), 500);\n  useEffect(() => {\n    const interval = setInterval(function () {\n      calculateLandFillAndPercentsWrapper();\n    }, 500);\n    return () => clearInterval(interval);\n  }, []);\n\n  function calculateLandFillAndPercentsWrapper() {\n    calculateLandFill();\n    calculatePercent();\n    calculateLandFillPercent();\n  }\n\n  function calculateLandFill() {\n    const sum =\n      Number(clients.current.value) +\n      Number(animalFeed.current.value) +\n      Number(compost.current.value) +\n      Number(partnerNetwork.current.value);\n    const diff = Number(quantity.current.value) - Number(sum);\n\n    landFill.current.value = Number(diff);\n  }\n\n  function calculateLandFillPercent() {\n    const sum =\n      Number(percentClients.current.value) +\n      Number(percentAnimalFeed.current.value) +\n      Number(percentCompost.current.value) +\n      Number(percentPartnerNetwork.current.value);\n\n    const diff = 100 - Number(sum);\n\n    percentLandFill.current.value = Number(diff).toFixed(2);\n  }\n\n  function calculatePercent() {\n    percentClients.current.value = (\n      Number(Number(clients.current.value) / Number(quantity.current.value)) *\n      100\n    ).toFixed(2);\n    percentAnimalFeed.current.value = (\n      Number(\n        Number(animalFeed.current.value) / Number(quantity.current.value)\n      ) * 100\n    ).toFixed(2);\n    percentCompost.current.value = (\n      Number(Number(compost.current.value) / Number(quantity.current.value)) *\n      100\n    ).toFixed(2);\n    percentPartnerNetwork.current.value = (\n      Number(\n        Number(partnerNetwork.current.value) / Number(quantity.current.value)\n      ) * 100\n    ).toFixed(2);\n  }\n\n  // Downloading CSV\n  function downloadCSV(csv, filename) {\n    const csvFile = new Blob([csv], { type: \"text/csv\" });\n    const downloadLink = document.createElement(\"a\");\n\n    downloadLink.download = filename;\n    downloadLink.href = window.URL.createObjectURL(csvFile);\n\n    downloadLink.style.display = \"none\";\n\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n  }\n\n  // Exporting Table to CSV\n  function exportTableToCSV(filename) {\n    var csv;\n    const rows = document.querySelectorAll(\"table tr\");\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = [],\n        cols = rows[i].querySelectorAll(\"td, th\");\n\n      for (var j = 0; j < cols.length - 1; j++) row.push(cols[j].innerText);\n\n      csv.push(row.join(\",\"));\n    }\n    downloadCSV(csv.join(\"\\n\"), filename);\n  }\n\n  var trackerData = JSON.stringify(trackers);\n  if (\n    new Date().getTime() > localStorage.getItem(\"expiry\") &&\n    localStorage.roles\n  ) {\n    const response = window.confirm(\n      \"Your session has expired. Do you still want to be logged in?\"\n    );\n\n    if (response) {\n      localStorage.removeItem(\"expiry\");\n      const date = new Date().setHours(new Date().getHours() + 1);\n      localStorage.setItem(\"expiry\", date);\n    }\n  }\n\n  {\n    if (\n      new Date().getTime() < localStorage.getItem(\"expiry\") &&\n      localStorage.roles\n    ) {\n      return (\n        <div className=\"container p-2\">\n          <p>\n            <strong>Welcome, {localStorage.getItem(\"firstname\")}!</strong>\n          </p>\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h3>Enter tracker data:</h3>\n            </div>\n            <div className=\"card-body\">\n              <div id=\"form-wrapper\">\n                <div\n                  className=\"tracker-data-entry\"\n                  id=\"tracker\"\n                >\n                  <Form.Group>\n                    {/* {% csrf_token %} */}\n                    <div className=\"row\">\n                      <div className=\"col-md-auto\">\n                        <label htmlFor=\"category\">Category</label>\n                        <br />\n                        <select\n                          className=\"form-select\"\n                          id=\"category\"\n                          name=\"category\"\n                          onChange={(event) => {\n                            setTrackers({\n                              ...trackers,\n                              Category: event.target.value,\n                            });\n                          }}\n                        >\n                          <option selected>Fresh Produce</option>\n                          <option>Meat</option>\n                          <option>Canned Food</option>\n                          <option>Bread</option>\n                          <option>Dairy</option>\n                          <option>Reclaimed</option>\n                        </select>\n                      </div>\n                      <div className=\"col-md-auto\">\n                        <label htmlFor=\"description\">Description</label>\n                        <br />\n                        <input\n                          type=\"text\"\n                          id=\"description\"\n                          className={`form-control input-text ${trackerCSS[\"customised-input\"]}`}\n                          placeholder=\"Description\"\n                          name=\"description\"\n                          onChange={(event) => {\n                            setTrackers({\n                              ...trackers,\n                              Description: event.target.value,\n                            });\n                          }}\n                        />\n                      </div>\n                      <div className=\"col-md-auto\">\n                        <label htmlFor=\"quantity\">Quantity</label>\n                        <br />\n                        <input\n                          type={`text`}\n                          id=\"quantity\"\n                          className={`form-control input-text ${trackerCSS[\"customised-input\"]}`}\n                          placeholder=\"Quantity\"\n                          name=\"quantity\"\n                          ref={quantity}\n                          onKeyUp={calculateLandFillAndPercentsWrapper}\n                          onChange={(event) => {\n                            setTrackers({\n                              ...trackers,\n                              Quantity: event.target.value,\n                            });\n                          }}\n                        />\n                      </div>\n                      <div className=\"col-md-auto\">\n                        <label htmlFor=\"qunits\">Units</label>\n                        <br />\n                        <select\n                          className=\"form-select\"\n                          id=\"qunits\"\n                          name=\"qunits\"\n                          onChange={(event) => {\n                            setTrackers({\n                              ...trackers,\n                              Qunits: event.target.value,\n                            });\n                          }}\n                        >\n                          <option selected>lbs</option>\n                          <option>kgs</option>\n                        </select>\n                      </div>\n                      <div className=\"col-auto\">\n                        <div className=\"row\">\n                          <div className=\"col-auto\">\n                            <label htmlFor=\"amount\">Amount</label>\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step=\"any\"\n                              className={`form-control ${trackerCSS[\"customised-input\"]}`}\n                              id=\"clients\"\n                              name=\"clients\"\n                              ref={clients}\n                              min={0}\n                              // style={{ width: \"10em\" }}\n                              onKeyUp={calculateLandFillAndPercentsWrapper}\n                              // onkeyup=\"calculateLandfill(); calculatePercent()\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  amountToClients: event.target.value,\n                                });\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-input\"]}`}\n                              id=\"animalFeed\"\n                              name=\"animalFeed\"\n                              ref={animalFeed}\n                              min={0}\n                              onKeyUp={calculateLandFillAndPercentsWrapper}\n                              // onkeyup=\"calculateLandfill(); calculatePercent()\"\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  amountToAFeed: event.target.value,\n                                });\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-input\"]}`}\n                              id=\"compost\"\n                              name=\"compost\"\n                              ref={compost}\n                              min={0}\n                              onKeyUp={calculateLandFillAndPercentsWrapper}\n                              // onkeyup=\"calculateLandfill(); calculatePercent()\"\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  amountToCompost: event.target.value,\n                                });\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-input\"]}`}\n                              id=\"partnerNetwork\"\n                              name=\"partnerNetwork\"\n                              ref={partnerNetwork}\n                              min={0}\n                              onKeyUp={calculateLandFillAndPercentsWrapper}\n                              // onKeyUp={() => {calculateLandfill(); calculatePercent()}}\n                              // onkeyup=\"calculateLandfill(); calculatePercent()\"\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  amountToPartnerNetwork: event.target.value,\n                                });\n                              }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-input\"]}`}\n                              id=\"landFill\"\n                              name=\"landFill\"\n                              ref={landFill}\n                              min={0}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  amountToLandfill: event.target.value,\n                                });\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"col\">\n                        <div className=\"row\">\n                          <div className=\"col-auto\">\n                            <label htmlFor=\"percent\">% Diverted to:</label>\n                            <br />\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-smaller-input\"]}`}\n                              id=\"percentClients\"\n                              name=\"percentClients\"\n                              ref={percentClients}\n                              min={0}\n                              value={0}\n                              max={100}\n                              onLoad={calculateLandFillPercent}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  percentClients: event.target.value,\n                                });\n                              }}\n                              // onLoad={() => calculateLandfillPercent()}\n                              // onload=\"calculateLandfillPercent()\"\n                              readonly\n                            />\n                          </div>\n                          <div className=\"col d-flex align-items-center\">\n                            Clients\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-smaller-input\"]}`}\n                              id=\"percentAnimalFeed\"\n                              name=\"percentAnimalFeed\"\n                              ref={percentAnimalFeed}\n                              min={0}\n                              value={0}\n                              max={100}\n                              onLoad={calculateLandFillPercent}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  percentAFeed: event.target.value,\n                                });\n                              }}\n                              // onLoad={() => calculateLandfillPercent()}\n                              // onload=\"calculateLandfillPercent()\"\n                              readonly\n                            />\n                          </div>\n                          <div className=\"col d-flex align-items-center\">\n                            Animal Feed\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-smaller-input\"]}`}\n                              id=\"percentCompost\"\n                              name=\"percentCompost\"\n                              ref={percentCompost}\n                              min={0}\n                              value={0}\n                              max={100}\n                              onLoad={calculateLandFillPercent}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  percentCompost: event.target.value,\n                                });\n                              }}\n                              // onLoad={() => calculateLandfillPercent()}\n                              // onload=\"calculateLandfillPercent()\"\n                              readonly\n                            />\n                          </div>\n                          <div className=\"col d-flex align-items-center\">\n                            Compost / Fertilizer\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-smaller-input\"]}`}\n                              id=\"percentPartnerNetwork\"\n                              name=\"percentPartnerNetwork\"\n                              ref={percentPartnerNetwork}\n                              min={0}\n                              value={0}\n                              max={100}\n                              onLoad={calculateLandFillPercent}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  percentPartNet: event.target.value,\n                                });\n                              }}\n                              // onLoad={() => calculateLandfillPercent()}\n                              // onLoad=\"calculateLandfillPercent()\"\n                              readonly\n                            />\n                          </div>\n                          <div className=\"col d-flex align-items-center\">\n                            Partner Network\n                          </div>\n                        </div>\n                        <div className=\"row pb-2\">\n                          <div className=\"col-auto\">\n                            <input\n                              type=\"number\"\n                              step = \"any\"\n                              className={`form-control ${trackerCSS[\"customised-smaller-input\"]}`}\n                              id=\"percentLandFill\"\n                              name=\"percentLandFill\"\n                              ref={percentLandFill}\n                              value={100}\n                              onChange={(event) => {\n                                setTrackers({\n                                  ...trackers,\n                                  percentLandfill: event.target.value,\n                                });\n                              }}\n                              readonly\n                            />\n                          </div>\n                          <div className=\"col d-flex align-items-center\">\n                            Landfill\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"row p-2\">\n                      <div className=\"d-flex justify-content-start\">\n                        <Button\n                          variant=\"outline-success\"\n                          className={`${trackerCSS[\"save\"]} btn btn-outline-success`}\n                          id=\"submit\"\n                          onClick={(e) => {\n                            fetchData();\n                            axios\n                              .post(\n                                \"http://127.0.0.1:8000/api/trackerInsert/\",\n                                {\n                                  Category: trackers.Category,\n                                  Description: trackers.Description,\n                                  Quantity: trackers.Quantity,\n                                  Qunits: trackers.Qunits,\n                                  amountToClients: trackers.amountToClients,\n                                  amountToAFeed: trackers.amountToAFeed,\n                                  amountToCompost: trackers.amountToCompost,\n                                  amountToPartNet:\n                                    trackers.amountToPartnerNetwork,\n                                  amountToLandfill: document.getElementById('landFill').value,\n                                  percentClients: document.getElementById('percentClients').value,\n                                  percentAFeed: document.getElementById('percentAnimalFeed').value,\n                                  percentCompost: document.getElementById('percentCompost').value,\n                                  percentPartNet: document.getElementById('percentPartnerNetwork').value,\n                                  percentLandfill: document.getElementById('percentLandFill').value,\n                                },\n                                {\n                                  headers: {\n                                    \"Content-type\": \"application/json\",\n                                  },\n                                }\n                              )\n                              .then((response) => {\n                                if (response.status == 201) {\n                                  window.alert(\n                                    \"Your form has been submitted successfully\"\n                                  );\n                                }\n                              })\n                              .catch((err) => console.warn(err));\n                          }}\n                        >\n                          Save\n                        </Button>\n                      </div>\n                    </div>\n                  </Form.Group>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <br />\n          <br />\n\n          <section id=\"section\">\n            <div className=\"card\">\n              <div className={`${trackerCSS[\"card-header\"]} card-header`}>\n                <h3>Database</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline-success\"\n                  className=\"btn btn-outline-success\"\n                  onClick={function () {\n                    exportTableToCSV(\"data.csv\");\n                  }}\n                  // onClick={() => exportTableToCSV(\"data.csv\")}\n                >\n                  Export CSV\n                </Button>\n              </div>\n              <div className=\"card-body\">\n                <Table\n                  striped\n                  bordered\n                  hover\n                  responsive\n                  style={{ width: \"100%\" }}\n                >\n                  <thead>\n                    <tr>\n                      <th>Category</th>\n                      <th>Description</th>\n                      <th>Quantity</th>\n                      <th>Units</th>\n                      <th>Clients</th>\n                      <th>Animal Feed</th>\n                      <th>Compost</th>\n                      <th>Partner Network</th>\n                      <th>Landfill</th>\n                      <th>Date Time</th>\n                      <th></th>\n                   \n                    </tr>\n                  </thead>\n                  <tbody>\n                  {getData && getData.length > 0 && getData.map((userObj) => (\n                    <tr>\n                      <td>{userObj.Category}</td>\n                      <td>{userObj.Description}</td>\n                      <td>{userObj.Quantity}</td>\n                      <td>{userObj.Qunits}</td>\n                      <td>{userObj.percentClients}</td>\n                      <td>{userObj.percentAFeed}</td>\n                      <td>{userObj.percentCompost}</td>\n                      <td>{userObj.percentPartNet}</td>\n                      <td>{userObj.percentLandfill}</td>\n                      <td>{userObj.date_time}</td>\n                      <td>\n                        <div>\n                \n                          <Button\n                            variant=\"danger\"\n                            className=\"btn btn-danger\"\n                            name=\"field\"\n                          >\n                            Delete\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                    ))}\n                   \n                  </tbody>\n                </Table>\n              </div>\n            </div>\n          </section>\n\n          <br />\n\n          <div id=\"penetrate\" className=\"penetrate\" onLoad={pieChart}></div>\n          {/* {{ json|json_script:\"json\" }} */}\n        </div>\n      );\n    } else if (\n      new Date().getTime() > localStorage.getItem(\"expiry\") &&\n      !localStorage.roles\n    ) {\n      return (\n        <section>\n          <div className=\"flex-container\">\n            <div className=\"text-center\">\n              <h1 className=\"heading1\">\n                <span className=\"fade-in\" id=\"digit1\">\n                  4\n                </span>\n                <span className=\"fade-in\" id=\"digit2\">\n                  0\n                </span>\n                <span className=\"fade-in\" id=\"digit3\">\n                  4\n                </span>\n              </h1>\n              <h3 className=\" heading3 fadeIn\">\n                YOU MUST LOGIN TO VIEW THIS PAGE\n              </h3>\n              <a href=\"/login\">\n                <Button type=\"button\" class=\"btn btn-primary \" name=\"button\">\n                  Login\n                </Button>\n              </a>\n            </div>\n          </div>\n        </section>\n      );\n    }\n  }\n\n  function pieChart() {\n    let penetrate = document.getElementById(\"penetrate\");\n    let h3 = document.createElement(\"h3\");\n    h3.innerText = \"Database Visuals\";\n    penetrate.appendChild(h3);\n\n    var mydata = JSON.parse(document.getElementById(\"json\").textContent);\n    mydata = JSON.parse(mydata);\n    mydata = JSON.parse(JSON.stringify(mydata));\n    mydata.forEach((val) => console.log(val.Category)); //print by field\n    console.log(mydata); // print whole object\n\n    var sum = mydata.reduce((n, { Quantity }) => n + Quantity, 0);\n    console.log(sum);\n\n    var result = Array.from(\n      mydata.reduce(\n        (acc, obj) =>\n          Object.keys(obj).reduce(\n            (acc, key) =>\n              typeof obj[key] == \"number\"\n                ? acc.set(key, (acc.get(key) || []).concat(obj[key]))\n                : acc,\n            acc\n          ),\n        new Map()\n      ),\n      ([name, values]) => ({\n        name,\n        average: (values.reduce((a, b) => a + b) / sum) * 100,\n      })\n    );\n    console.log(result);\n\n    let mycategory = mydata[0].Category;\n    let myclients = result[1].average.toFixed(2);\n    let myfeeds = result[2].average.toFixed(2);\n    let mycompost = result[3].average.toFixed(2);\n    let mypartners = result[4].average.toFixed(2);\n    let mylandfill = result[5].average.toFixed(2);\n\n    let thedata = [\n      { category: \"Clients\", number: myclients },\n      { category: \"Animal Feed\", number: myfeeds },\n      { category: \"Compost / Fertilizer\", number: mycompost },\n      { category: \"Partner Network\", number: mypartners },\n      { category: \"Landfill\", number: mylandfill },\n    ];\n\n    let width = 750,\n      height = 500;\n\n    let colors = d3Scale.scaleOrdinal(d3ScaleChromatic.schemeDark2);\n\n    let svg = d3Selection\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"background\", \"#e7f5e4\");\n\n    let data = d3Shape\n      .pie()\n      .sort(null)\n      .value(function (d) {\n        return d.number;\n      })(thedata);\n\n    let segments = d3Shape\n      .arc()\n      .innerRadius(0)\n      .outerRadius(200)\n      .padAngle(0.05)\n      .padRadius(50);\n\n    let sections = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(250, 250)\")\n      .selectAll(\"path\")\n      .data(data);\n\n    sections\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", segments)\n      .attr(\"fill\", function (d) {\n        return colors(d.data.category);\n      });\n\n    let content = d3Selection.select(\"g\").selectAll(\"text\").data(data);\n\n    content\n      .enter()\n      .append(\"text\")\n      .classed(\"inside\", true)\n      .each(function (d) {\n        let center = segments.centroid(d);\n        d3Selection\n          .select(this)\n          .attr(\"x\", center[0])\n          .attr(\"y\", center[1])\n          .text(`${d.data.category}:\\n${d.data.number}`)\n          .style(\"text-anchor\", \"middle\");\n      });\n\n    let legends = svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(500, 100)\")\n      .selectAll(\".legends\")\n      .data(data);\n\n    let legend = legends\n      .enter()\n      .append(\"g\")\n      .classed(\"legends\", true)\n      .attr(\"transform\", function (d, i) {\n        return \"translate(0,\" + (i + 1) * 30 + \")\";\n      });\n\n    legend\n      .append(\"rect\")\n      .attr(\"width\", 20)\n      .attr(\"height\", 20)\n      .attr(\"fill\", function (d) {\n        return colors(d.data.category);\n      });\n\n    legend\n      .append(\"text\")\n      .classed(\"label\", true)\n      .text(function (d) {\n        return d.data.category;\n      })\n      .attr(\"fill\", function (d) {\n        return colors(d.data.category);\n      })\n      .attr(\"x\", 30)\n      .attr(\"y\", 15);\n    //   console.log(`Hey my category is: ${mydata[0].Category}`);\n    //   for (let i = 0; i < mydata.length; i++) console.log(mydata[i].DivertAFeed);\n  }\n}\nexport default Tracker;\n",[],{"ruleId":"38","severity":1,"message":"39","line":7,"column":8,"nodeType":"40","messageId":"41","endLine":7,"endColumn":15},{"ruleId":"38","severity":1,"message":"42","line":8,"column":17,"nodeType":"40","messageId":"41","endLine":8,"endColumn":20},{"ruleId":"38","severity":1,"message":"43","line":9,"column":10,"nodeType":"40","messageId":"41","endLine":9,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":49,"column":29,"nodeType":"46","messageId":"47","endLine":49,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":85,"column":3,"nodeType":"50","messageId":"51","endLine":361,"endColumn":4},{"ruleId":"44","severity":1,"message":"45","line":126,"column":45,"nodeType":"46","messageId":"47","endLine":126,"endColumn":47},{"ruleId":"48","severity":1,"message":"49","line":165,"column":78,"nodeType":"50","messageId":"51","endLine":165,"endColumn":93},{"ruleId":"48","severity":1,"message":"49","line":167,"column":78,"nodeType":"50","messageId":"51","endLine":167,"endColumn":100},{"ruleId":"48","severity":1,"message":"49","line":168,"column":78,"nodeType":"50","messageId":"51","endLine":168,"endColumn":102},{"ruleId":"48","severity":1,"message":"49","line":169,"column":78,"nodeType":"50","messageId":"51","endLine":169,"endColumn":100},{"ruleId":"44","severity":1,"message":"45","line":179,"column":41,"nodeType":"46","messageId":"47","endLine":179,"endColumn":43},{"ruleId":"44","severity":1,"message":"45","line":179,"column":90,"nodeType":"46","messageId":"47","endLine":179,"endColumn":92},{"ruleId":"44","severity":1,"message":"45","line":184,"column":54,"nodeType":"46","messageId":"47","endLine":184,"endColumn":56},{"ruleId":"44","severity":1,"message":"45","line":209,"column":57,"nodeType":"46","messageId":"47","endLine":209,"endColumn":59},{"ruleId":"44","severity":1,"message":"45","line":221,"column":49,"nodeType":"46","messageId":"47","endLine":221,"endColumn":51},{"ruleId":"44","severity":1,"message":"45","line":326,"column":47,"nodeType":"46","messageId":"47","endLine":326,"endColumn":49},{"ruleId":"38","severity":1,"message":"39","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":15},{"ruleId":"38","severity":1,"message":"52","line":12,"column":13,"nodeType":"40","messageId":"41","endLine":12,"endColumn":20},{"ruleId":"38","severity":1,"message":"53","line":16,"column":13,"nodeType":"40","messageId":"41","endLine":16,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":63,"column":6,"nodeType":"56","endLine":63,"endColumn":8,"suggestions":"57"},{"ruleId":"38","severity":1,"message":"58","line":145,"column":7,"nodeType":"40","messageId":"41","endLine":145,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":161,"column":3,"nodeType":"50","messageId":"51","endLine":685,"endColumn":4},{"ruleId":"44","severity":1,"message":"45","line":551,"column":53,"nodeType":"46","messageId":"47","endLine":551,"endColumn":55},{"ruleId":"38","severity":1,"message":"59","line":721,"column":9,"nodeType":"40","messageId":"41","endLine":721,"endColumn":19},"no-unused-vars","'fourcss' is defined but never used.","Identifier","unusedVar","'all' is defined but never used.","'local' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'d3Fetch' is defined but never used.","'d3Axis' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateLandFillAndPercentsWrapper'. Either include it or remove the dependency array.","ArrayExpression",["60"],"'trackerData' is assigned a value but never used.","'mycategory' is assigned a value but never used.",{"desc":"61","fix":"62"},"Update the dependencies array to be: [calculateLandFillAndPercentsWrapper]",{"range":"63","text":"64"},[1731,1733],"[calculateLandFillAndPercentsWrapper]"]